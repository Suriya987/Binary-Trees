Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:
Input: root = [1,null,2]
Output: 2


Approach : Recursive

Time complexity : O(N)
Space complexity : O(N)

class Solution {
public:
    int helper(TreeNode* root)
    {
        //base case
         if(root==NULL)  return 0;

         int left=0;
         if(root->left!=NULL)
          left=1+helper(root->left);
          int right=0;
          if(root->right!=NULL)
           right=1+helper(root->right);

           return max(left,right);
    }
    int maxDepth(TreeNode* root) {
         if(root==NULL)  return 0;

         return 1+helper(root);
    }
};

Approach : Iteravtive using Level order Traversal

Time complexity : O(N)
Space complexity : O(N)

 int maxDepth(TreeNode* root) {
         if(root==NULL)  return 0;

         queue<TreeNode*> q;
         q.push(root);
          int heightOfTree=0;
         while(!q.empty())
         {
            int size=q.size();
           
            heightOfTree+=1;
            for(int i=0;i<size;i++)
            {
                TreeNode* curr=q.front();
                q.pop();
                if(curr->left!=NULL) q.push(curr->left);
                if(curr->right!=NULL) q.push(curr->right);

                 
            }
         }
         return heightOfTree;
    }
};
