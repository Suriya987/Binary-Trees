Given a Binary Tree of nodes, you need to find all the possible paths from the root node to all the leaf nodes of the binary tree.

Example 1:

Input:
       1
    /     \
   2       3
Output: 
1 2 
1 3 
Explanation: 
All possible paths:
1->2
1->3
Example 2:

Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 
10 20 40 
10 20 60 
10 30 

Approach : 

Time complexity : O(N)
Space complexity : O(height of the tree)

class Solution {
  public:
     void findPaths(Node* root,vector<int>temp,vector<vector<int>>&result)
     {
         //base case
           if(root->left==NULL && root->right==NULL)
           {
               //temp = {1,2,4 } or { 1,5 ,6}
               temp.push_back(root->data);
               result.push_back(temp);
               return;
           }
           
           //if(root!=NULL)
           temp.push_back(root->data);
            
            if(root->left)
            findPaths(root->left,temp,result);  

           if(root->right)
             findPaths(root->right,temp,result);          
           
     }
    vector<vector<int>> Paths(Node* root) {
         vector<vector<int>> result;
         vector<int>temp;
         
         findPaths(root,temp,result);
         return result;
    }
};
