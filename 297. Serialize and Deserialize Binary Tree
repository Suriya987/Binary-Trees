Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer,
or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. 
You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, 
so please be creative and come up with different approaches yourself.

Time complexity : O(N)
Space compelxity : O(N) 

class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
         
        // using level order traversal for serailizing
           queue<TreeNode*>q;
           q.push(root);
           string serialized="";

           while(!q.empty())
           {
              TreeNode* curr=q.front();
              q.pop();
              if(curr==NULL)
                 serialized.append("#,");
              else
               serialized.append(to_string(curr->val)+',');

                if(curr)
                {
                   q.push(curr->left);
                   q.push(curr->right);
                }
               
           }

           return serialized;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
         
          if(data.size()==0)
            return NULL;

         stringstream s(data);
         string str;
         getline(s,str,',');
         if(str=="#")
           return NULL;
         TreeNode* curr=new TreeNode(stoi(str));
         queue<TreeNode*>q;
         q.push(curr);

         while(!q.empty())
         {
             TreeNode* node=q.front();
             q.pop();

             getline(s,str,',');

              //check whether it is '#' becoz it represents NULL 
                 if(str=="#")
                   node->left=NULL;
                 else
                 {
                   TreeNode* leftNode=new TreeNode(stoi(str));
                   node->left=leftNode;
                   q.push(leftNode);
                 }

                  getline(s,str,',');
                  if(str=="#")
                   node->right=NULL;
                    else
                    {
                    TreeNode* rightNode=new TreeNode(stoi(str));
                    node->right=rightNode;
                    q.push(rightNode);
                    }              
         }
         return curr;
           
    }
};


 
