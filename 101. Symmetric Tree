Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Approach :

Time complexity : O(N)
Space complexity : O(N)

class Solution {
public:
    bool isSymmetric(TreeNode* left,TreeNode* right)
    {
        if(left==NULL | right==NULL)
          return left==right;

        if(left->val!=right->val)  return false;

        return isSymmetric(left->left,right->right) && isSymmetric(left->right,right->left);
    }
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)  return false;

        return isSymmetric(root->left,root->right);
    }
};
