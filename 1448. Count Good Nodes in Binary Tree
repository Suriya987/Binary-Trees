Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

Soln:

Time complexity : O(N)
Space Complexity : O(H)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

public:
    int f(TreeNode* root, int maxi)
{
    if (root == NULL) return 0;

    int isValid = 0;
    if (root->val >= maxi) isValid = 1;

    maxi = max(maxi, root->val); // Update max seen so far

    int left = f(root->left, maxi);
    int right = f(root->right, maxi);

    return left + right + isValid;
}
    int goodNodes(TreeNode* root) {
        int min=INT_MIN;
        return f(root,min);
    }
};
