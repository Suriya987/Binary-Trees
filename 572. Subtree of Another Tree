Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.

A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. 
The tree tree could also be considered as a subtree of itself.

Example 1:
Input: root = [3,4,5,1,2], subRoot = [4,1,2]
Output: true
Example 2:
Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
Output: false

Constraints:

The number of nodes in the root tree is in the range [1, 2000].
The number of nodes in the subRoot tree is in the range [1, 1000].
-104 <= root.val <= 104
-104 <= subRoot.val <= 104

Time complexity : O(N)*O(M)  at worst case
Space complexity : O(height of the tree)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool findMatch(TreeNode* root,TreeNode* subRoot)
    {
        if(root==NULL && subRoot==NULL)
        return true;

        if(  (root==NULL || subRoot==NULL ) || root->val != subRoot->val )
          return false;

         bool left=findMatch(root->left,subRoot->left);
         bool right=findMatch(root->right,subRoot->right);

         return left&&right;
    }
    bool helper(TreeNode* root,TreeNode* subRoot)
    {
        if(root==NULL) return false;

           if(root->val==subRoot->val)
           {
               bool find=findMatch(root,subRoot);
               if(find==true)
                 return true;
           }

           bool left=helper(root->left,subRoot);
           if(left==true)  return true;
           bool right=helper(root->right,subRoot);

           return left||right;

    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
            return helper(root,subRoot);
    }
};
