Given below is a binary tree. The task is to print the top view of binary tree. Top view of a binary tree is the set of nodes visible when the tree is viewed from the top. For the given below tree

       1
    /     \
   2       3
  /  \    /   \
4    5  6   7

Top view will be: 4 2 1 3 7
Note: Return nodes from leftmost node to rightmost node. Also if 2 nodes are outside the shadow of the tree and are at same position then consider the left
ones only(i.e. leftmost). 
For ex - 1 2 3 N 4 5 N 6 N 7 N 8 N 9 N N N N N will give 8 2 1 3 as answer. Here 8 and 9 are on the same position but 9 will get shadowed.

Example 1:

Input:
      1
   /    \
  2      3
Output: 2 1 3
Example 2:

Input:
       10
    /      \
  20        30
 /   \    /    \
40   60  90    100
Output: 40 20 10 30 100


Approach : Recursive 
  It wont work for all cases why 
           { refer in Note }

class Solution
{
    public:
    void findLeftView(Node* root,vector<int>&result)
    {
         //base case
         if(root==NULL)
         {
             return;
         }
         result.push_back(root->data);
         findLeftView(root->left,result);
    }
 
    void findRightView(Node* root ,vector<int>&result)
    {
        //base case
        if(root==NULL)
        {
            return;
        }
        result.push_back(root->data);
        findRightView(root->right,result);
    }
    vector<int> topView(Node *root)
    {
          vector<int>result;
          result.push_back(root->data);
          findLeftView(root->left,result);
          reverse(result.begin(),result.end());
          
          findRightView(root->right,result);
          
          return result;
    }

};

Approach : Vertical print approach 


Time complexity : O(N)
Space complexity : O(N)

class Solution
{
    public:
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    vector<int> topView(Node *root)
    {
          vector<int>result;
          //inside queue if we want to use 2 values use pair
           queue<pair<Node*,int>>q;
           map<int,int>mp;
           
           q.push({root,0});
           
           while(!q.empty())
           {
               auto it=q.front();
               Node* curr=it.first;
               int axis=it.second;
               q.pop();
               
                //check if any node is already in the same level
                if(mp.find(axis)==mp.end()) 
                  mp[axis]=curr->data;
                  
                if(curr->left!=NULL)  q.push({curr->left,axis-1});
                if(curr->right!=NULL) q.push({curr->right,axis+1});
               
           }
           
           for(auto it:mp)
           {
               result.push_back(it.second);
           }
           return result;
    }

};
