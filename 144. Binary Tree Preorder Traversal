Given the root of a binary tree, return the preorder traversal of its nodes' values.

Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Approach : Recursive and iterative available 


//Recursive 

Time complexity : O(N)
Space complexity : O(N)

class Solution {
public:     // root->left->right
    vector<int> findTree(TreeNode* root,vector<int>&res)
    {
        //base  case
          if(root==NULL)
            return res;
         
         res.push_back(root->val);
         findTree(root->left,res);
         findTree(root->right,res);

         return res;
    }
    vector<int> preorderTraversal(TreeNode* root) {
         vector<int>res;
         return findTree(root,res);
    }
};

//Iterative

class Solution {
public:     // root->left->right
     vector<int> preorderTraversal(TreeNode* root) {
         vector<int>res;
           if(root==NULL)  return res;
           stack<TreeNode*>st;
           st.push(root);

           while(!st.empty())
           {
              TreeNode* temp=st.top();
              st.pop();
              if(temp->right!=NULL)  st.push(temp->right);
              if(temp->left!=NULL)  st.push(temp->left);

              res.push_back(temp->val);
           }

           return res;
    }
};
 
