Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T 
that has both p and q as descendants (where we allow a node to be a descendant of itself).”

Approach :

Time complexity : O(N)
Space complexity : O(N)  -> recursive stack space

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
           //base case
            if(root==NULL)
              return root;

            if(root==p || root==q)  
            return root;
            // TreeNode* left=root;
            // TreeNode* right=root;
            // if(!=left)
           TreeNode* left=lowestCommonAncestor(root->left,p,q);
            //if(root!=right)
            TreeNode* right=lowestCommonAncestor(root->right,p,q);

          if(left==NULL )
            return right;
          else if(right==NULL)
            return left;
          else
            return root;
    }
};
