Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25.

Examples :

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Approach : Level order traversal

Time complexity : O(N)
Space complexity : O(N)

class Solution {
  public:
    vector <int> bottomView(Node *root) {
        vector<int>result;
        if(root==NULL)  return result;
        
        //queue
        queue<pair<Node*,int>>q;
        //map
        map<int,int>mp;
        q.push({root,0});
        
        while(!q.empty())
        {
            auto it=q.front();
            Node* curr=it.first;
            int axis=it.second;
            
            mp[axis]=curr->data;
            q.pop();
            
            if(curr->left!=NULL)
             q.push({curr->left,axis-1});
             if(curr->right!=NULL)
               q.push({curr->right,axis+1});
        }
        
        for(auto it:mp)
        {
            result.push_back(it.second);
        }
        
        return result;
    }
};
