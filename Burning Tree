Given a binary tree and a node data called target. Find the minimum time required to burn the complete binary tree if the target is set on fire.
It is known that in 1 second all nodes connected to a given node get burned. That is its left child, right child, and parent.
Note: The tree contains unique values.


Examples : 

Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      6
       / \      \
      7   8      9
                   \
                   10
Target Node = 8
Output: 7
Explanation: If leaf with the value 8 is set on fire. 
After 1 sec: 5 is set on fire.
After 2 sec: 2, 7 are set to fire.
After 3 sec: 4, 1 are set to fire.
After 4 sec: 3 is set to fire.
After 5 sec: 6 is set to fire.
After 6 sec: 9 is set to fire.
After 7 sec: 10 is set to fire.
It takes 7s to burn the complete tree.
Input:      
          1
        /   \
      2      3
    /  \      \
   4    5      7
  /    / 
 8    10
Target Node = 10
Output: 5

Expected Time Complexity: O(number of nodes)
Expected Auxiliary Space: O(height of tree) 

Time complexity : O(N)
Space complexity :  O(N)

class Solution {
  public:
    void findParent(unordered_map<Node*,Node*>&parent,Node* root,int target,Node* &targetNode)
    {
        //base case
          if(root==NULL)  return;
          
          if(target==root->data)
            targetNode=root;
            
          
          if(root->left!=NULL)
          {
              parent[root->left]=root;
              findParent(parent,root->left,target,targetNode);
          }
          if(root->right!=NULL)
          {
              parent[root->right]=root;
              findParent(parent,root->right,target,targetNode);
          }
    }
    int minTime(Node* root, int target) 
    {
           //find the parent for the current node
           unordered_map<Node*,Node*>parent;
           Node* targetNode=0;
           findParent(parent,root,target,targetNode);
           
           //queue for level order Kind of traversal
            queue<Node*>getBurned;
            unordered_map<Node*,bool>burned;
            
            getBurned.push(targetNode);
            burned[targetNode]=true;
            int totalWork=0;
            
            while(!getBurned.empty())
            {
                int size=getBurned.size();
                int currWork=0;
                
                for(int i=0;i<size;i++)
                {
                    Node* currNode=getBurned.front();
                    getBurned.pop();
                    
                    if(currNode->left!=NULL && !burned[currNode->left])
                    {
                        currWork=1;
                        getBurned.push(currNode->left);
                        burned[currNode->left]=true;
                    }
                    if(currNode->right!=NULL && !burned[currNode->right])
                    {
                        currWork=1;
                        getBurned.push(currNode->right);
                        burned[currNode->right]=true;
                    }
                    if(parent[currNode]!=NULL && !burned[parent[currNode]])
                    {
                        currWork=1;
                        getBurned.push(parent[currNode]);
                        burned[parent[currNode]]=true;
                    }
                }
                totalWork+=currWork;
            }
            return totalWork;
            
    }
};
