Given the root of a binary tree, the value of a target node target, and an integer k, return an array of the values of all nodes that have
a distance k from the target node.

You can return the answer in any order.

Time complexity : O(N)
Space Cmplexity : O(N)

class Solution {
public:
    void findParent(TreeNode* root,unordered_map<TreeNode*,TreeNode*>&parentTrack)
    {
        queue<TreeNode*>q;
        q.push(root);
        {
            while(!q.empty())
            {
                TreeNode* curr=q.front();
                q.pop();
              
                if(curr->left!=NULL)
                {
                    parentTrack[curr->left]=curr;
                    q.push(curr->left);
                }
                if(curr->right!=NULL)
                {
                     parentTrack[curr->right]=curr;
                     q.push(curr->right);
                }
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
           unordered_map<TreeNode*,TreeNode*>parentTrack;
           findParent(root,parentTrack);

           queue<TreeNode*>q;
           unordered_map<TreeNode*,bool> visited;

           q.push(target);
           visited[target]=true;
           int distance=0;
           while(!q.empty())
           {
              if(distance==k)
                break;
              int len=q.size();
             
             for(int i=0;i<len;i++){
                 TreeNode* curr=q.front();
                 q.pop();
              //add Left
                if(curr->left!=NULL && !visited[curr->left])
                {
                    q.push(curr->left);
                    visited[curr->left]=true;
                }

              //add Right
                   if(curr->right!=NULL && !visited[curr->right])
                    {
                        q.push(curr->right);
                        visited[curr->right]=true;
                    }
              //add Top
                   if(parentTrack[curr]!=NULL && !visited[parentTrack[curr]])
                   {
                    q.push(parentTrack[curr]);
                    visited[parentTrack[curr]]=true;
                   }

                  // distance++;

           }
           distance++;
           }

           vector<int>res;

           while(!q.empty())
           {
            TreeNode* curr=q.front();
            q.pop();
            res.push_back(curr->val);
           }

           return res;

    }
};

/*

this code is for just finding the lower nodes of dist k

void findNodes(TreeNode* root,int k,vector<int>& res,int dist)
    {
        //base case
          if(dist>k || root==NULL)  return;

          if(dist==k) 
          {
            res.push_back(root->val);
            return;
          } 

          findNodes(root->left,k,res,dist+1);
          findNodes(root->right,k,res,dist+1);
          
    }
    void findTarget(TreeNode* root,vector<int>&res,TreeNode* target,int k)
    {
        //base case
          if(root==NULL)  return;

          if(root==target)
             findNodes(root,k,res,0);

         findTarget(root->left,res,target,k);
         findTarget(root->right,res,target,k);
    }

     vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int>res;
        findTarget(root,res,target,k);
        return res;
    }
    */
