Given the root of a binary tree, invert the tree, and return its root.

 

Example 1:


Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]
Example 2:


Input: root = [2,1,3]
Output: [2,3,1]
Example 3:

Input: root = []
Output: []

Soln:

Time complexity : O(N) -> visiting every node atlest 1 time
Space complexity : O(Height of the tree)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    public:
    TreeNode* InvertHere(TreeNode* root)
    {
        if(root==NULL)  return NULL;

         InvertHere(root->left);
         InvertHere(root->right);

         TreeNode* Lft=root->left;
         TreeNode* Rght=root->right;

         root->left=Rght;
         root->right=Lft;

         return root;
    }
public:
    TreeNode* invertTree(TreeNode* root) {
       return InvertHere(root);
        //return root;
    }
};
