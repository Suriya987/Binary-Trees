Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree,
construct and return the binary tree.

Example 1:
Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: inorder = [-1], postorder = [-1]
Output: [-1]


Approach :

Time complexity : O(N)
space complexity : O(N) ->  map   O(height of the tree)

class Solution {
public:
    TreeNode* constructTree(vector<int>&postorder,int postStart,int postEnd,vector<int>&inorder,int inStart,int inEnd,unordered_map<int,int>&map)
    {
        //base case
          if(inStart>inEnd || postStart<postEnd)
            return NULL;

         TreeNode* root=new TreeNode(postorder[postStart]);
         int rootIndex=map[root->val];
         //find the left and right subtree range
         int leftSubtreeLen=rootIndex-inStart;
         int rightSubtreeLen=inEnd-rootIndex;  //getting len of right subtree

         root->right=
         constructTree(postorder,postStart-1,postStart-rightSubtreeLen,inorder,rootIndex+1,inEnd,map);
         
         root->left=constructTree(postorder,postStart-rightSubtreeLen-1,postEnd,inorder,inStart,rootIndex-1,map);

         return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int,int>map;

        int n=inorder.size();

        //updating the indexes for particular values in map for identifying the left and right trees
        for(int i=0;i<n;i++)
        {
              map[inorder[i]]=i;
        }
          int postorderLen=postorder.size();
          int inorderLen=inorder.size();
          TreeNode* head=constructTree(postorder,postorderLen-1,0,inorder,0,inorderLen-1,map);

          return head; 
    }
};

