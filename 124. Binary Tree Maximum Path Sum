A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them.
A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.


Approach : Linear

Time complexity : O(N)
space complexiy : O(N)

class Solution {
public:
    int helper(TreeNode* root,int &maxi)
    {
        //base case
          if(root==NULL)  return 0;

          int left=max(0,helper(root->left,maxi));
          int right=max(0,helper(root->right,maxi));

          maxi=max(maxi,left+right+root->val);
          return root->val+max(left,right);
    }
    int maxPathSum(TreeNode* root) {
         int maxi=INT_MIN;
         maxi=max(maxi,helper(root,maxi));
         return maxi;
    }
};
